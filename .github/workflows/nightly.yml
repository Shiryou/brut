# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Update git tag
      run: |
        git tag -f nightly
        git push -f origin nightly

  build:
    name: Build Release
    needs: create_release
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cli_src: ./brut-cli/bin/Release/net8.0/linux-x64/publish/brut-cli
            gui_src: ./brut-gui/bin/Gtk/Release/net8.0/linux-x64/publish
            cli_dst: ./brut-cli-ubuntu
            gui_dst: ./brut-gui-ubuntu.gz
          - os: macos-latest
            cli_src: ./brut-cli/bin/Release/net8.0/osx-arm64/publish/brut-cli
            gui_src: ./brut-gui/bin/Mac64/Release/net8.0/brut-gui.dmg
            cli_dst: ./brut-cli-mac
            gui_dst: ./brut-gui-mac.dmg
            extension: 
          - os: windows-latest
            cli_src: .\brut-cli\bin\Release\net8.0\win-x64\publish\brut-cli.exe
            gui_src: .\brut-gui\bin\Wpf\Release\net8.0-windows\win-x64\publish\
            cli_dst: .\brut-cli-win.exe
            gui_dst: .\brut-gui-win.zip
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y libvlc-dev
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test
    - name: Publish
      run: dotnet publish --configuration Release --no-build

    - name: Move CLI artifact
      if: matrix.os != 'windows-latest'
      run: mv "${{ matrix.cli_src }}" "${{ matrix.cli_dst }}"
    - name: Move CLI artifact
      if: matrix.os == 'windows-latest'
      run: Move-Item -Path "${{ matrix.cli_src }}" -Destination "${{ matrix.cli_dst }}" -Force

    - name: Build GUI artifact
      if: matrix.os == 'ubuntu-latest'
      run: tar -C ${{ matrix.gui_src }} -zcvf ${{ matrix.gui_dst }} .
    - name: Build GUI artifact
      if: matrix.os == 'macos-latest'
      run: mv "${{ matrix.gui_src }}" "${{ matrix.gui_dst }}"
    - name: Build GUI artifact
      if: matrix.os == 'windows-latest'
      run: powershell Compress-Archive -Path '${{ matrix.gui_src }}\*' -DestinationPath '${{ matrix.gui_dst }}' -Force

    - name: Update nightly release
      uses: ncipollo/release-action@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: "${{ matrix.cli_dst }},${{ matrix.gui_dst }}"
        tag: "nightly"
        commit: ${{ github.ref_name }}
        body: A build of the most recent compilable commit to the repository. Use at your own risk.
        prerelease: true
        allowUpdates: true
        updateOnlyUnreleased: true
        removeArtifacts: false
        replacesArtifacts: true
