# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Releases

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      refToBuild:
        description: 'Tag to build'
        type: string

env:
  TAG: ${{ inputs.refToBuild || github.ref_name }}

jobs:
  build:
    name: Build Release
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cli_src: ./brut-cli/bin/Release/net8.0/linux-x64/publish/brut-cli
            gui_src: ./brut-gui/bin/Gtk/Release/net8.0/linux-x64/publish
            cli_dst: ./brut-cli-ubuntu-${{ inputs.refToBuild || github.ref_name }}
            gui_dst: ./brut-gui-ubuntu-${{ inputs.refToBuild || github.ref_name }}.gz
          - os: macos-latest
            cli_src: ./brut-cli/bin/Release/net8.0/osx-arm64/publish/brut-cli
            gui_src: ./brut-gui/bin/Mac64/Release/net8.0/brut-gui.dmg
            cli_dst: ./brut-cli-mac-${{ inputs.refToBuild || github.ref_name }}
            gui_dst: ./brut-gui-mac-${{ inputs.refToBuild || github.ref_name }}.dmg
            extension: 
          - os: windows-latest
            cli_src: .\brut-cli\bin\Release\net8.0\win-x64\publish\brut-cli.exe
            gui_src: .\brut-gui\bin\Wpf\Release\net8.0-windows\win-x64\publish\
            cli_dst: .\brut-cli-win-${{ inputs.refToBuild || github.ref_name }}.exe
            gui_dst: .\brut-gui-win-${{ inputs.refToBuild || github.ref_name }}.zip
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.TAG }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y libvlc-dev
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test
    - name: Publish
      run: dotnet publish --configuration Release --no-build

    - name: Move CLI artifact
      if: matrix.os != 'windows-latest'
      run: mv "${{ matrix.cli_src }}" "${{ matrix.cli_dst }}"
    - name: Move CLI artifact
      if: matrix.os == 'windows-latest'
      run: Move-Item -Path "${{ matrix.cli_src }}" -Destination "${{ matrix.cli_dst }}" -Force

    - name: Build GUI artifact
      if: matrix.os == 'ubuntu-latest'
      run: tar -C ${{ matrix.gui_src }} -zcvf ${{ matrix.gui_dst }} .
    - name: Build GUI artifact
      if: matrix.os == 'macos-latest'
      run: mv "${{ matrix.gui_src }}" "${{ matrix.gui_dst }}"
    - name: Build GUI artifact
      if: matrix.os == 'windows-latest'
      run: powershell Compress-Archive -Path '${{ matrix.gui_src }}\*' -DestinationPath '${{ matrix.gui_dst }}' -Force

    - name: Update nightly release
      uses: ncipollo/release-action@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: "${{ matrix.cli_dst }},${{ matrix.gui_dst }}"
        tag: ${{ env.TAG }}
        commit: ${{ env.TAG }}
        name: "ðŸ“¦ Release ${{ env.TAG }}"
        draft: true
        allowUpdates: true
        updateOnlyUnreleased: true
        removeArtifacts: false
        replacesArtifacts: true
